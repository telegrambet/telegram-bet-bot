import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import sqlite3

# FunÃ§Ã£o para conectar ao banco de dados
def conectar():
    return sqlite3.connect("apostas.db")

# Comando /acessar
async def acessar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    nome = update.effective_user.first_name
    id_telegram = update.effective_user.id

    # Conecta e verifica se o usuÃ¡rio jÃ¡ existe
    conn = conectar()
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM usuarios WHERE id_telegram = ?", (id_telegram,))
    usuario = cursor.fetchone()

    # Se nÃ£o existir, cria com saldo 0
    if not usuario:
        cursor.execute("INSERT INTO usuarios (id_telegram, nome, saldo) VALUES (?, ?, ?)",
                       (id_telegram, nome, 0))
        conn.commit()

    conn.close()

    # Mensagem de boas-vindas
    mensagem = (
        "Fala jogador! âš½ðŸ¥‡ Bem-vindo ao Telegram Bet! A Bet OFICIAL no telegram\n\n"
        "âœ… Acesso liberado com sucesso\n"
        f"ðŸ‘¤ Nome: {nome}\n"
        f"ðŸ†” ID: {id_telegram}"
    )

    await update.message.reply_text(mensagem)

# Comando /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
Â  Â  await update.message.reply_text("Fala jogador! âš½ðŸ¥‡ Bem-vindo ao Telegram Bet! A Bet OFICIAL no telegram")

# InÃ­cio do bot
if __name__ == "__main__":
Â  Â  from dotenv import load_dotenv
Â  Â  load_dotenv()

Â  Â  TOKEN = os.environ["BOT_TOKEN"]
Â  Â  app = ApplicationBuilder().token(TOKEN).build()

Â  Â  app.add_handler(CommandHandler("start", start))
Â  Â  app.add_handler(CommandHandler("acessar", acessar))

Â  Â  print("Bot rodando...")
Â  Â  app.run_polling()

  
